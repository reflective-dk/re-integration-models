# Class Class
---
id: 12b4049a-fb65-4429-a9d7-c91d88a58ac9
mimeType: application/vnd.reflective-dk.object+json
registrations:
  - validity:
      - input:
          model: { id: d341451b-d971-4656-bac2-1783776f8efe, name: Metamodel }
          # Responsible actor - actor: { id: actor.id }
          # This class is its own class
          class: { id: 12b4049a-fb65-4429-a9d7-c91d88a58ac9, name: Class }
          extends: { id: c4315fa9-3765-40c0-ba45-ef821c416f83, name: Object }
          name: Class
          description: This class defines the properties of any class (itself included)
          properties:
            model:
              description: Relation to the model that owns this class
              type: simple
              dataType:
                type: relation
                target: { id: 54985140-62ec-49fd-b05a-661e090c405f, name: Model }
            extends:
              description: A class may explicitly extend another class (if not it extends the Object class)
              type: simple
              dataType:
                type: relation
                target: { id: 12b4049a-fb65-4429-a9d7-c91d88a58ac9, name: Class }
            mixins:
              description: >-
                A class may mix in any number of other classes, inheriting all of
                their properties. This mechanism is very similar to extends,
                except the classes being mixed in are usually written with that
                purpose in mind.
              type: map
              dataType:
                type: relation
                target: { id: 12b4049a-fb65-4429-a9d7-c91d88a58ac9, name: Class }
            name:
              description: The name of this class
              type: simple
              dataType: string
            description:
              description: A brief description of the purpose of this class
              type: simple
              dataType: string
            properties:
              description: Properties of this class (in addition to any inherited properties)
              type: map
              dataType:
                type: definition
                definition: propertyType
            definitions:
              description: Convenience data type declarations
              type: map
              dataType:
                type: definition
                definition: dataType
          definitions:
            propertyType:
              type: json
              schema:
                type: object
                properties:
                  description: { type: 'string' }
                  type: { type: 'string', enum: [ 'simple', 'map' ] }
                  dataType:
                    oneOf:
                      - type: string
                        enum: [ 'string', 'integer', 'float', 'boolean', 'dateTime', 'binary' ]
                      - type: object    # dataType: relation
                        properties:
                          type: { type: 'string', pattern: 'relation' }
                          target:
                            type: object
                            properties:
                              id:
                                type: string
                                pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
                            additionalProperties: true
                        additionalProperties: false
                      - type: object    # dataType: definition
                        properties:
                          type: { type: 'string', pattern: 'definition' }
                          definition: { type: 'string' }
                        additionalProperties: false
                      - type: object    # dataType: json
                        properties:
                          type: { type: 'string', pattern: 'json' }
                          schema: { type: 'object' }
                        additionalProperties: false
            dataType:
              type: json
              schema:
                oneOf:
                  - type: string
                    enum: [ 'string', 'integer', 'float', 'boolean', 'dateTime', 'binary' ]
                  - type: object    # dataType: relation
                    properties:
                      type: { type: 'string', pattern: 'relation' }
                      target:
                        type: object
                        properties:
                          id:
                            type: string
                            pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
                        additionalProperties: true
                    additionalProperties: false
                  - type: object    # dataType: definition
                    properties:
                      type: { type: 'string', pattern: 'definition' }
                      definition: { type: 'string' }
                    additionalProperties: false
                  - type: object    # dataType: json
                    properties:
                      type: { type: 'string', pattern: 'json' }
                      schema: { type: 'object' }
                    additionalProperties: false
        from: 1900-01-01T00:00:00.000Z
...
